;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 01.05.2017
;Author  : Nikita
;Company :
;Comments:
;
;
;Chip type               : ATmega328P
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*****************************************************/
;
;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// TWI functions
;#include <twi.h>
;
;// TWI Slave receive buffer
;#define TWI_RX_BUFFER_SIZE 4
;unsigned char twi_rx_buffer[TWI_RX_BUFFER_SIZE];
;
;// TWI Slave transmit buffer
;#define TWI_TX_BUFFER_SIZE 4
;unsigned char twi_tx_buffer[TWI_TX_BUFFER_SIZE];
;
;// TWI Slave receive handler
;// This handler is called everytime a byte
;// is received by the TWI slave
;bool twi_rx_handler(bool rx_complete)
; 0000 002A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002B if (twi_result==TWI_RES_OK)
;PCODE: $0000000F VOL: 0
;	rx_complete -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 002C    {
; 0000 002D    // A data byte was received without error
; 0000 002E    // and it was stored at twi_rx_buffer[twi_rx_index]
; 0000 002F    // Place your code here to process the received byte
; 0000 0030    // Note: processing must be VERY FAST, otherwise
; 0000 0031    // it is better to process the received data when
; 0000 0032    // all communication with the master has finished
; 0000 0033     PORTD.4=twi_rx_buffer[0];
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0034     //delay_ms(100);
; 0000 0035    }
; 0000 0036 else
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0037    {
; 0000 0038    // Receive error
; 0000 0039    // Place your code here to process the error
; 0000 003A 
; 0000 003B    return false; // Stop further reception
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 003C    }
;PCODE: $00000022 VOL: 0
; 0000 003D 
; 0000 003E // The TWI master has finished transmitting data?
; 0000 003F if (rx_complete) return false; // Yes, no more bytes to receive
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0040 
; 0000 0041 // Signal to the TWI master that the TWI slave
; 0000 0042 // is ready to accept more data, as long as
; 0000 0043 // there is enough space in the receive buffer
; 0000 0044 return (twi_rx_index<sizeof(twi_rx_buffer));
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0045 }
;PCODE: $0000002F VOL: 0
;
;// TWI Slave transmission handler
;// This handler is called for the first time when the
;// transmission from the TWI slave to the master
;// is about to begin, returning the number of bytes
;// that need to be transmitted
;// The second time the handler is called when the
;// transmission has finished
;// In this case it must return 0
;unsigned char twi_tx_handler(bool tx_complete)
; 0000 0050 {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0051 if (tx_complete==false)
;PCODE: $00000032 VOL: 0
;	tx_complete -> Y+0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0052    {
; 0000 0053    // Transmission from slave to master is about to start
; 0000 0054    // Return the number of bytes to transmit
; 0000 0055    return sizeof(twi_tx_buffer);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0056    }
; 0000 0057 
; 0000 0058 // Transmission from slave to master has finished
; 0000 0059 // Place code here to eventually process data from
; 0000 005A // the twi_rx_buffer, if it wasn't yet processed
; 0000 005B // in the twi_rx_handler
; 0000 005C 
; 0000 005D 
; 0000 005E 
; 0000 005F // No more bytes to send in this transaction
; 0000 0060 return 0;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0061 }
;PCODE: $0000003D VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0066 {
;PCODE: $0000003E VOL: 0
; 0000 0067 // Declare your local variables here
; 0000 0068 
; 0000 0069 // Crystal Oscillator division factor: 1
; 0000 006A #pragma optsize-
; 0000 006B CLKPR=0x80;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 006C CLKPR=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 006D #ifdef _OPTIMIZE_SIZE_
; 0000 006E #pragma optsize+
; 0000 006F #endif
; 0000 0070 
; 0000 0071 // Input/Output Ports initialization
; 0000 0072 // Port B initialization
; 0000 0073 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0074 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0075 PORTB=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0076 DDRB=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0077 
; 0000 0078 // Port C initialization
; 0000 0079 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 007A // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 007B PORTC=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 007C DDRC=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 007D 
; 0000 007E // Port D initialization
; 0000 007F // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0080 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0081 PORTD=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0082 DDRD=0x10;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0083 
; 0000 0084 // Timer/Counter 0 initialization
; 0000 0085 // Clock source: System Clock
; 0000 0086 // Clock value: Timer 0 Stopped
; 0000 0087 // Mode: Normal top=0xFF
; 0000 0088 // OC0A output: Disconnected
; 0000 0089 // OC0B output: Disconnected
; 0000 008A TCCR0A=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 008B TCCR0B=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 008C TCNT0=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 008D OCR0A=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 008E OCR0B=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 008F 
; 0000 0090 // Timer/Counter 1 initialization
; 0000 0091 // Clock source: System Clock
; 0000 0092 // Clock value: Timer1 Stopped
; 0000 0093 // Mode: Normal top=0xFFFF
; 0000 0094 // OC1A output: Discon.
; 0000 0095 // OC1B output: Discon.
; 0000 0096 // Noise Canceler: Off
; 0000 0097 // Input Capture on Falling Edge
; 0000 0098 // Timer1 Overflow Interrupt: Off
; 0000 0099 // Input Capture Interrupt: Off
; 0000 009A // Compare A Match Interrupt: Off
; 0000 009B // Compare B Match Interrupt: Off
; 0000 009C TCCR1A=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 009D TCCR1B=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 009E TCNT1H=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 009F TCNT1L=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 00A0 ICR1H=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 00A1 ICR1L=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 00A2 OCR1AH=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00A3 OCR1AL=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00A4 OCR1BH=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00A5 OCR1BL=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 00A6 
; 0000 00A7 // Timer/Counter 2 initialization
; 0000 00A8 // Clock source: System Clock
; 0000 00A9 // Clock value: Timer2 Stopped
; 0000 00AA // Mode: Normal top=0xFF
; 0000 00AB // OC2A output: Disconnected
; 0000 00AC // OC2B output: Disconnected
; 0000 00AD ASSR=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00AE TCCR2A=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00AF TCCR2B=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00B0 TCNT2=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00B1 OCR2A=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00B2 OCR2B=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00B3 
; 0000 00B4 // External Interrupt(s) initialization
; 0000 00B5 // INT0: Off
; 0000 00B6 // INT1: Off
; 0000 00B7 // Interrupt on any change on pins PCINT0-7: Off
; 0000 00B8 // Interrupt on any change on pins PCINT8-14: Off
; 0000 00B9 // Interrupt on any change on pins PCINT16-23: Off
; 0000 00BA EICRA=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00BB EIMSK=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00BC PCICR=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00BD 
; 0000 00BE // Timer/Counter 0 Interrupt(s) initialization
; 0000 00BF TIMSK0=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00C0 
; 0000 00C1 // Timer/Counter 1 Interrupt(s) initialization
; 0000 00C2 TIMSK1=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00C3 
; 0000 00C4 // Timer/Counter 2 Interrupt(s) initialization
; 0000 00C5 TIMSK2=0x00;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00C6 
; 0000 00C7 // USART initialization
; 0000 00C8 // USART disabled
; 0000 00C9 UCSR0B=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00CA 
; 0000 00CB // Analog Comparator initialization
; 0000 00CC // Analog Comparator: Off
; 0000 00CD // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00CE ACSR=0x80;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00CF ADCSRB=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00D0 DIDR1=0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00D1 
; 0000 00D2 // ADC initialization
; 0000 00D3 // ADC disabled
; 0000 00D4 ADCSRA=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00D5 
; 0000 00D6 // SPI initialization
; 0000 00D7 // SPI disabled
; 0000 00D8 SPCR=0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00D9 
; 0000 00DA // TWI initialization
; 0000 00DB // Mode: TWI Slave
; 0000 00DC // Match Any Slave Address: Off
; 0000 00DD // I2C Bus Slave Address: 0x00
; 0000 00DE twi_slave_init(false,0x00,twi_rx_buffer,sizeof(twi_rx_buffer),twi_tx_buffer,twi_rx_handler,twi_tx_handler);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00DF 
; 0000 00E0 // Global enable interrupts
; 0000 00E1 #asm("sei")
;PCODE: $0000009F VOL: 0
	sei
;PCODE: $000000A0 VOL: 0
; 0000 00E2 
; 0000 00E3 while (1)
;PCODE: $000000A1 VOL: 0
; 0000 00E4       {
; 0000 00E5       // Place your code here
; 0000 00E6           //PORTD.4=~PORTD.4;
; 0000 00E7            //delay_ms(100);
; 0000 00E8       }
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00E9 }
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
