;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 27.04.2017
;Author  : Nikita
;Company :
;Comments:
;
;
;Chip type               : ATmega328P
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*****************************************************/
;
;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;// TWI functions
;#include <twi.h>
;
;bit b1, status_phone, status_lock, status_LED;
;unsigned char Permit, counter_digitizing, checksum;
;
;unsigned int current, voltage, avarage_current, avarage_voltage;
;unsigned char status_power;
;
;unsigned char read_command, current_command, i, size_commands, write_command, color_R, color_G, color_B;
;
;//I2C Bus Slave Address
;#define SLAVE_ADDRESS 0x0f //10 = 0x0a
;
;//Restrictive current
;#define RESTRICTIVE_CURRENT 1000 //700 = 2A
;
;//minimum supply current
;#define MIN_SUPPLY_CURRENT 50
;
;// TWI Slave receive buffer
;#define TWI_RX_BUFFER_SIZE 13
;unsigned char twi_rx_buffer[TWI_RX_BUFFER_SIZE];
;
;// TWI Slave transmit buffer
;#define TWI_TX_BUFFER_SIZE 21
;unsigned char twi_tx_buffer[TWI_TX_BUFFER_SIZE];
;
;
;void setPower(char x){
; 0000 0036 void setPower(char x){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0037     PORTD.5 = x;
;PCODE: $0000000F VOL: 0
;	x -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0038     status_power = x;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0039 }
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;
;// TWI Slave receive handler
;// This handler is called everytime a byte
;// is received by the TWI slave
;bool twi_rx_handler(bool rx_complete)
; 0000 003F {
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0040 if (twi_result==TWI_RES_OK)
;PCODE: $00000021 VOL: 0
;	rx_complete -> Y+0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0041    {
; 0000 0042    // A data byte was received without error
; 0000 0043    // and it was stored at twi_rx_buffer[twi_rx_index]
; 0000 0044    // Place your code here to process the received byte
; 0000 0045    // Note: processing must be VERY FAST, otherwise
; 0000 0046    // it is better to process the received data when
; 0000 0047    // all communication with the master has finished
; 0000 0048    if(((twi_rx_buffer[0]>3) && (twi_rx_buffer[0] < 22)) && ((twi_rx_buffer[1]==0 || (twi_rx_buffer[1]==1)))){
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0049 
; 0000 004A 
; 0000 004B    checksum = 0;
;PCODE: $0000003D VOL: 0
; 0000 004C     for (i = 0; i < twi_rx_buffer[0] - 1; i++) {
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 004D         checksum += twi_rx_buffer[i];
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 004E     };
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 004F 
; 0000 0050     if(checksum == twi_rx_buffer[twi_rx_buffer[0] - 1]){
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0051     checksum = 0;
;PCODE: $0000005F VOL: 0
; 0000 0052     read_command = 0;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0053     current_command = 0;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0054     size_commands = 1;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0055     write_command = 0;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0056     if (twi_rx_buffer[1] == 0) {        //command set
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0057         for (i = 2; i < twi_rx_buffer[0] - 1; i++) {  //twi_rx_buffer[0] - count command
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0058                 if (read_command == 0) {
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0059                     current_command = twi_rx_buffer[i];
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 005A                     read_command = 1;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 005B                 }
; 0000 005C                 else{
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 005D                     switch (current_command) {
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 005E                         case 0:{   //set power
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 005F                             switch(twi_rx_buffer[i]){
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0060                                 case 0: setPower(1); //OFF
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0061                                     break;
;PCODE: $00000093 VOL: 0
; 0000 0062                                 case 1: setPower(0); //ON
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0063                                     break;
;PCODE: $00000099 VOL: 0
; 0000 0064                                 case 2: setPower(2); //FAIL
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0065                                     break;
;PCODE: $0000009F VOL: 0
; 0000 0066                                  default: setPower(1); //OFF
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0067                             };
;PCODE: $000000A3 VOL: 0
; 0000 0068 
; 0000 0069                             read_command = 0;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 006A                         }
; 0000 006B                         break;
;PCODE: $000000A6 VOL: 0
; 0000 006C                         case 1:{    //set color rgb
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 006D                             switch (read_command) {
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 006E                                  case 1: PORTB.3 = twi_rx_buffer[i]; //color_R
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 006F                                     break;
;PCODE: $000000BB VOL: 0
; 0000 0070                                  case 2: PORTB.2 = twi_rx_buffer[i]; //color_G
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0071                                     break;
;PCODE: $000000CC VOL: 0
; 0000 0072                                  case 3: PORTB.1 = twi_rx_buffer[i]; //color_B
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0073                                     break;
;PCODE: $000000DD VOL: 0
; 0000 0074                                 };
;PCODE: $000000DE VOL: 0
; 0000 0075                             if(read_command == 3){
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0076                                 read_command = 0;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0077                             }
; 0000 0078                             else
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0079                                 read_command++;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 007A                         }
;PCODE: $000000E9 VOL: 0
; 0000 007B                         break;
;PCODE: $000000EA VOL: 0
; 0000 007C                         case 2:{    //set LED
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 007D                             PORTD.6 = twi_rx_buffer[i];
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 007E                             read_command = 0;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 007F                         }
; 0000 0080                         break;
;PCODE: $000000FD VOL: 0
; 0000 0081                         case 3:{    //open door
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0082                             PORTB.4 = twi_rx_buffer[i];
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0083                             read_command = 0;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0084                         }
; 0000 0085                         break;
;PCODE: $00000110 VOL: 0
; 0000 0086                         };
;PCODE: $00000111 VOL: 0
; 0000 0087                 }
;PCODE: $00000112 VOL: 0
; 0000 0088         };
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0089         twi_tx_buffer[0] = 0;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 008A     }
; 0000 008B     else  {                            //command get
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 008C         for (i = 0; i < 21; i++) {
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 008D             twi_tx_buffer[i] = 0;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 008E         };
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 008F         for (i = 2; i < twi_rx_buffer[0] - 1; i++) {  //twi_rx_buffer[0] - count command
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0090             twi_tx_buffer[size_commands + 1] = twi_rx_buffer[i];
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0091             if(twi_rx_buffer[i] == 1){
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0092                 size_commands += 4;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 0093             }else{
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 0094                 if((twi_rx_buffer[i] == 5) || (twi_rx_buffer[i] == 6)){
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 0095                     size_commands += 3;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 0096                 }else
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 0097                     size_commands += 2;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 0098             }
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0099         };
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 009A 
; 0000 009B         size_commands++;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 009C 
; 0000 009D         for (i = 2; i < size_commands; i++) {  //twi_rx_buffer[0] - count command
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 009E             if (write_command == 0) {
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 009F                     current_command = twi_tx_buffer[i];
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 00A0                     write_command = 1;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 00A1                 }
; 0000 00A2                 else{
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 00A3                     switch (current_command) {
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 00A4                         case 0:{   //get power
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 00A5                             switch(status_power){
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 00A6                                 case 0: twi_tx_buffer[i] = 1;; //OFF
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 00A7                                     break;
;PCODE: $00000197 VOL: 0
; 0000 00A8                                 case 1: twi_tx_buffer[i] = 0; //ON
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 00A9                                     break;
;PCODE: $000001A0 VOL: 0
; 0000 00AA                                 case 2: twi_tx_buffer[i] = 2; //FAIL
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 00AB                                     break;
;PCODE: $000001A9 VOL: 0
; 0000 00AC                             };
;PCODE: $000001AA VOL: 0
; 0000 00AD 
; 0000 00AE                             write_command = 0;
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 00AF                         }
; 0000 00B0                         break;
;PCODE: $000001AD VOL: 0
; 0000 00B1                         case 1:{    //get color rgb
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 00B2                             switch (write_command) {
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 00B3                                  case 1: twi_tx_buffer[i] = color_R;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 00B4                                     break;
;PCODE: $000001BA VOL: 0
; 0000 00B5                                  case 2: twi_tx_buffer[i] = color_G;
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 00B6                                     break;
;PCODE: $000001C3 VOL: 0
; 0000 00B7                                  case 3: twi_tx_buffer[i] = color_B;
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 00B8                                     break;
;PCODE: $000001CC VOL: 0
; 0000 00B9                                 };
;PCODE: $000001CD VOL: 0
; 0000 00BA                             if(write_command == 3){
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 00BB                                 write_command = 0;
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 00BC                             }
; 0000 00BD                             else
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 00BE                                 write_command++;
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 00BF                         }
;PCODE: $000001D8 VOL: 0
; 0000 00C0                         break;
;PCODE: $000001D9 VOL: 0
; 0000 00C1                         case 2:{    //get status_LED
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 00C2                             twi_tx_buffer[i] = status_LED;
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 00C3                             write_command = 0;
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 00C4                         }
; 0000 00C5                         break;
;PCODE: $000001E5 VOL: 0
; 0000 00C6                         case 3:{    //get status_lock
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 00C7                             twi_tx_buffer[i] = status_lock;
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 00C8                             write_command = 0;
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 00C9                         }
; 0000 00CA                         break;
;PCODE: $000001F1 VOL: 0
; 0000 00CB                         case 4:{    //get status_phone
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 00CC                             twi_tx_buffer[i] = status_phone;
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 00CD                             write_command = 0;
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 00CE                         }
; 0000 00CF                         break;
;PCODE: $000001FD VOL: 0
; 0000 00D0                         case 5:{    //get avarage_current
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 00D1                             switch (write_command) {
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 00D2                                  case 1: twi_tx_buffer[i] = avarage_current;
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 00D3                                     break;
;PCODE: $00000209 VOL: 0
; 0000 00D4                                  case 2: twi_tx_buffer[i] = avarage_current>>8;
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 00D5                                     break;
;PCODE: $00000211 VOL: 0
; 0000 00D6                                 };
;PCODE: $00000212 VOL: 0
; 0000 00D7                             if(write_command == 2){
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 00D8                                 write_command = 0;
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 00D9                             }
; 0000 00DA                             else
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 00DB                                 write_command++;
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 00DC                         }
;PCODE: $0000021D VOL: 0
; 0000 00DD                         break;
;PCODE: $0000021E VOL: 0
; 0000 00DE                         case 6:{    //get avarage_voltage
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 00DF                             switch (write_command) {
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 00E0                                  case 1: twi_tx_buffer[i] = avarage_voltage;
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 00E1                                     break;
;PCODE: $0000022A VOL: 0
; 0000 00E2                                  case 2: twi_tx_buffer[i] = avarage_voltage>>8;
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 00E3                                     break;
;PCODE: $00000232 VOL: 0
; 0000 00E4                                 };
;PCODE: $00000233 VOL: 0
; 0000 00E5                             if(write_command == 2){
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 00E6                                 write_command = 0;
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 00E7                             }
; 0000 00E8                             else
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 00E9                                 write_command++;
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 00EA                         }
;PCODE: $0000023E VOL: 0
; 0000 00EB                         break;
;PCODE: $0000023F VOL: 0
; 0000 00EC                         };
;PCODE: $00000240 VOL: 0
; 0000 00ED                 }
;PCODE: $00000241 VOL: 0
; 0000 00EE         };
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 00EF         size_commands++;
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 00F0         twi_tx_buffer[0] = size_commands;
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 00F1         twi_tx_buffer[1] = 1;
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 00F2         for (i = 0; i < size_commands - 1; i++) {
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 00F3             checksum +=  twi_tx_buffer[i];
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 00F4         };
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 00F5         twi_tx_buffer[size_commands - 1] = checksum;
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 00F6     };
;PCODE: $0000026F VOL: 0
; 0000 00F7     }else{
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 00F8         twi_tx_buffer[0] = 255;
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 00F9     }
;PCODE: $00000274 VOL: 0
; 0000 00FA     }else{
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 00FB         twi_tx_buffer[0] = 255;
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0000 00FC     }
;PCODE: $00000279 VOL: 0
; 0000 00FD 
; 0000 00FE 
; 0000 00FF    }
; 0000 0100 else
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 0101    {
; 0000 0102    // Receive error
; 0000 0103    // Place your code here to process the error
; 0000 0104 
; 0000 0105    return false; // Stop further reception
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0000 0106    }
;PCODE: $0000027F VOL: 0
; 0000 0107 
; 0000 0108 // The TWI master has finished transmitting data?
; 0000 0109 if (rx_complete) return false; // Yes, no more bytes to receive
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 010A 
; 0000 010B // Signal to the TWI master that the TWI slave
; 0000 010C // is ready to accept more data, as long as
; 0000 010D // there is enough space in the receive buffer
; 0000 010E return (twi_rx_index<sizeof(twi_rx_buffer));
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 010F }
;PCODE: $0000028C VOL: 0
;
;// TWI Slave transmission handler
;// This handler is called for the first time when the
;// transmission from the TWI slave to the master
;// is about to begin, returning the number of bytes
;// that need to be transmitted
;// The second time the handler is called when the
;// transmission has finished
;// In this case it must return 0
;unsigned char twi_tx_handler(bool tx_complete)
; 0000 011A {
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 011B if (tx_complete==false)
;PCODE: $0000028F VOL: 0
;	tx_complete -> Y+0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 011C    {
; 0000 011D    // Transmission from slave to master is about to start
; 0000 011E    // Return the number of bytes to transmit
; 0000 011F 
; 0000 0120 
; 0000 0121    return sizeof(twi_tx_buffer);
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0000 0122    }
; 0000 0123 
; 0000 0124 // Transmission from slave to master has finished
; 0000 0125 // Place code here to eventually process data from
; 0000 0126 // the twi_rx_buffer, if it wasn't yet processed
; 0000 0127 // in the twi_rx_handler
; 0000 0128 
; 0000 0129 // No more bytes to send in this transaction
; 0000 012A return 0;
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0000 012B }
;PCODE: $0000029A VOL: 0
;
;// Declare your global variables here
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0131 {
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0000 0132 // Place your code here    16ms
; 0000 0133     b1=0;
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 0134 }
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;
;
;// Declare your global variables here
;
;void main(void)
; 0000 013A {
;PCODE: $000002A2 VOL: 0
; 0000 013B // Declare your local variables here
; 0000 013C 
; 0000 013D // Crystal Oscillator division factor: 1
; 0000 013E #pragma optsize-
; 0000 013F CLKPR=0x80;
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 0140 CLKPR=0x00;
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0000 0141 #ifdef _OPTIMIZE_SIZE_
; 0000 0142 #pragma optsize+
; 0000 0143 #endif
; 0000 0144 
; 0000 0145 // Input/Output Ports initialization
; 0000 0146 // Port B initialization
; 0000 0147 // Func7=In Func6=In Func5=In Func4=Out Func3=Out Func2=Out Func1=Out Func0=In
; 0000 0148 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0149 PORTB=0x00;
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 014A DDRB=0x1e;
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0000 014B 
; 0000 014C // Port C initialization
; 0000 014D // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 014E // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 014F PORTC=0x00;
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 0150 DDRC=0x00;
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0000 0151 
; 0000 0152 // Port D initialization
; 0000 0153 // Func7=In Func6=Out Func5=Out Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0154 // State7=T State6=T State5=T State4=0 State3=T State2=T State1=T State0=T
; 0000 0155 PORTD=0x04;
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0000 0156 DDRD=0x60;
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0000 0157 
; 0000 0158 // Timer/Counter 0 initialization
; 0000 0159 // Clock source: System Clock
; 0000 015A // Clock value: 15,625 kHz
; 0000 015B // Mode: Normal top=0xFF
; 0000 015C // OC0A output: Disconnected
; 0000 015D // OC0B output: Disconnected
; 0000 015E TCCR0A=0x00;
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0000 015F TCCR0B=0x05;
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
; 0000 0160 TCNT0=0x00;
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0000 0161 OCR0A=0x00;
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0000 0162 OCR0B=0x00;
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
; 0000 0163 
; 0000 0164 // Timer/Counter 1 initialization
; 0000 0165 // Clock source: System Clock
; 0000 0166 // Clock value: Timer1 Stopped
; 0000 0167 // Mode: Normal top=0xFFFF
; 0000 0168 // OC1A output: Discon.
; 0000 0169 // OC1B output: Discon.
; 0000 016A // Noise Canceler: Off
; 0000 016B // Input Capture on Falling Edge
; 0000 016C // Timer1 Overflow Interrupt: Off
; 0000 016D // Input Capture Interrupt: Off
; 0000 016E // Compare A Match Interrupt: Off
; 0000 016F // Compare B Match Interrupt: Off
; 0000 0170 TCCR1A=0x00;
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 0171 TCCR1B=0x00;
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 0172 TCNT1H=0x00;
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 0173 TCNT1L=0x00;
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0000 0174 ICR1H=0x00;
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 0175 ICR1L=0x00;
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 0176 OCR1AH=0x00;
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 0177 OCR1AL=0x00;
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0000 0178 OCR1BH=0x00;
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0000 0179 OCR1BL=0x00;
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 017A 
; 0000 017B // Timer/Counter 2 initialization
; 0000 017C // Clock source: System Clock
; 0000 017D // Clock value: Timer2 Stopped
; 0000 017E // Mode: Normal top=0xFF
; 0000 017F // OC2A output: Disconnected
; 0000 0180 // OC2B output: Disconnected
; 0000 0181 ASSR=0x00;
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 0182 TCCR2A=0x00;
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0000 0183 TCCR2B=0x00;
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0000 0184 TCNT2=0x00;
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0000 0185 OCR2A=0x00;
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
; 0000 0186 OCR2B=0x00;
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
; 0000 0187 
; 0000 0188 // External Interrupt(s) initialization
; 0000 0189 // INT0: Off
; 0000 018A // INT1: Off
; 0000 018B // Interrupt on any change on pins PCINT0-7: Off
; 0000 018C // Interrupt on any change on pins PCINT8-14: Off
; 0000 018D // Interrupt on any change on pins PCINT16-23: Off
; 0000 018E EICRA=0x00;
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 018F EIMSK=0x00;
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
; 0000 0190 PCICR=0x00;
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0000 0191 
; 0000 0192 // Timer/Counter 0 Interrupt(s) initialization
; 0000 0193 TIMSK0=0x01;
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
; 0000 0194 
; 0000 0195 // Timer/Counter 1 Interrupt(s) initialization
; 0000 0196 TIMSK1=0x00;
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
; 0000 0197 
; 0000 0198 // Timer/Counter 2 Interrupt(s) initialization
; 0000 0199 TIMSK2=0x00;
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0000 019A 
; 0000 019B // USART initialization
; 0000 019C // USART disabled
; 0000 019D UCSR0B=0x00;
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0000 019E 
; 0000 019F // Analog Comparator initialization
; 0000 01A0 // Analog Comparator: Off
; 0000 01A1 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 01A2 ACSR=0x80;
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
; 0000 01A3 ADCSRB=0x00;
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
; 0000 01A4 DIDR1=0x00;
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0000 01A5 
; 0000 01A6 // ADC initialization
; 0000 01A7 // ADC disabled
; 0000 01A8 ADMUX = 0x40;
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0000 01A9 ADCSRA = 0x87;
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 01AA 
; 0000 01AB // SPI initialization
; 0000 01AC // SPI disabled
; 0000 01AD SPCR=0x00;
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 01AE 
; 0000 01AF // TWI initialization
; 0000 01B0 // TWI disabled
; 0000 01B1 TWCR=0x00;
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0000 01B2 
; 0000 01B3 // TWI initialization
; 0000 01B4 // Mode: TWI Slave
; 0000 01B5 // Match Any Slave Address: Off
; 0000 01B6 // I2C Bus Slave Address: 0x00
; 0000 01B7 twi_slave_init(false, SLAVE_ADDRESS,twi_rx_buffer,sizeof(twi_rx_buffer),twi_tx_buffer,twi_rx_handler,twi_tx_handler);
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 0000 01B8 
; 0000 01B9 Permit=0;
;PCODE: $00000307 VOL: 0
; 0000 01BA current=0;
;PCODE: $00000308 VOL: 0
; 0000 01BB voltage=0;
;PCODE: $00000309 VOL: 0
; 0000 01BC counter_digitizing = 0;
;PCODE: $0000030A VOL: 0
; 0000 01BD 
; 0000 01BE avarage_current = 0;
;PCODE: $0000030B VOL: 0
; 0000 01BF avarage_voltage = 0;
;PCODE: $0000030C VOL: 0
; 0000 01C0 status_power = 1;
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0000 01C1 status_phone = 0;
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
; 0000 01C2 status_lock = 0;
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 01C3 status_LED = 0;
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0000 01C4 color_R = 0;
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
; 0000 01C5 color_G = 0;
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
; 0000 01C6 color_B = 0;
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0000 01C7 
; 0000 01C8 // Global enable interrupts
; 0000 01C9 #asm("sei")
;PCODE: $0000031B VOL: 0
	sei
;PCODE: $0000031C VOL: 0
; 0000 01CA 
; 0000 01CB while (1)
;PCODE: $0000031D VOL: 0
; 0000 01CC       {
; 0000 01CD       b1=1;
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 0000 01CE       color_R = PORTB.3;
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0000 01CF       color_G = PORTB.2;
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
; 0000 01D0       color_B = PORTB.1;
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0000 01D1       status_LED = PORTD.6;
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
; 0000 01D2       status_lock = PIND.2;
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
; 0000 01D3 
; 0000 01D4       if (PORTB.4==1){
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
; 0000 01D5         Permit++;
;PCODE: $00000340 VOL: 0
; 0000 01D6         if (Permit==10){
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
; 0000 01D7             PORTB.4=0;
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
; 0000 01D8             Permit=0;
;PCODE: $00000346 VOL: 0
; 0000 01D9         }
; 0000 01DA       }
;PCODE: $00000347 VOL: 0
; 0000 01DB       else
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0000 01DC         Permit=0;
;PCODE: $0000034A VOL: 0
; 0000 01DD 
; 0000 01DE       if(status_power == 0){
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
; 0000 01DF         ADMUX&=0xfe;
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
; 0000 01E0         ADCSRA|=0x40;
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
; 0000 01E1         while((ADCSRA&0x40)==0x40);
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0000 01E2         current+=ADCW;
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0000 01E3 
; 0000 01E4         ADMUX|=0x01;
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
; 0000 01E5         ADCSRA|=0x40;
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
; 0000 01E6         while((ADCSRA&0x40)==0x40);
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
; 0000 01E7         voltage+=ADCW;
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
; 0000 01E8 
; 0000 01E9         counter_digitizing++;
;PCODE: $0000036E VOL: 0
; 0000 01EA         if(counter_digitizing == 8){
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
; 0000 01EB             avarage_current = current>>3;
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
; 0000 01EC             avarage_voltage = voltage>>3;
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
; 0000 01ED              if (avarage_current > RESTRICTIVE_CURRENT){
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
; 0000 01EE                 PORTD.5 = 1;
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
; 0000 01EF                 status_power = 2; // Error power
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
; 0000 01F0              }
; 0000 01F1              if (avarage_current > MIN_SUPPLY_CURRENT){
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
; 0000 01F2                 status_phone = 1;
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
; 0000 01F3              }else{
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
; 0000 01F4                 status_phone = 0;
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
; 0000 01F5              }
;PCODE: $00000389 VOL: 0
; 0000 01F6             counter_digitizing = 0;
;PCODE: $0000038A VOL: 0
; 0000 01F7             current = 0;
;PCODE: $0000038B VOL: 0
; 0000 01F8             voltage = 0;
;PCODE: $0000038C VOL: 0
; 0000 01F9         }
; 0000 01FA       }
;PCODE: $0000038D VOL: 0
; 0000 01FB 
; 0000 01FC       while(b1);
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
; 0000 01FD       }
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
; 0000 01FE }
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
